{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Sons of PHP Reporting Issues Please use the main Sons of PHP Repository to report any issues that you find. If you find any issues with the documentation, please submit issues in the dedicated Documentation Repository . Contributing Please submit Pull Requests to the main Sons of PHP Repository . If you would like to help with documentation, please use the dedicated Documentation Repository to submit pull requests. Getting Help Please visit the Sons of PHP Organization Discussions section to ask questions and get more help. Hanging Out Drop by the Discord Server .","title":"Home"},{"location":"#welcome-to-the-sons-of-php","text":"","title":"Welcome to the Sons of PHP"},{"location":"#reporting-issues","text":"Please use the main Sons of PHP Repository to report any issues that you find. If you find any issues with the documentation, please submit issues in the dedicated Documentation Repository .","title":"Reporting Issues"},{"location":"#contributing","text":"Please submit Pull Requests to the main Sons of PHP Repository . If you would like to help with documentation, please use the dedicated Documentation Repository to submit pull requests.","title":"Contributing"},{"location":"#getting-help","text":"Please visit the Sons of PHP Organization Discussions section to ask questions and get more help.","title":"Getting Help"},{"location":"#hanging-out","text":"Drop by the Discord Server .","title":"Hanging Out"},{"location":"code-of-conduct/","text":"Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at joshua@sonsofphp.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Code of Conduct"},{"location":"code-of-conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code-of-conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"code-of-conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code-of-conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"code-of-conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at joshua@sonsofphp.com. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"code-of-conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"code-of-conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"code-of-conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"code-of-conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"code-of-conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.","title":"Attribution"},{"location":"contributing/","text":"How to Contribute The Sons of PHP is always looking for people who can contribute to the project. Popular ways people get started contributing is by updating our Documentation . Documentation All of our documentation is kept in our Documentation Repository and can be browsed online. You can browse the Issues and create a Pull Request to help solve some of those. GitHub Discussions Sons of PHP Discussions are centralized so all questions and help can be done in one location. Finding and helping answer questions is an easy way to become more involved. Code All of our code is kept in the Mother Repository and manged from there. You can browse the issues and PRs for all the different Sons of PHP packages.","title":"Contributing"},{"location":"contributing/#how-to-contribute","text":"The Sons of PHP is always looking for people who can contribute to the project. Popular ways people get started contributing is by updating our Documentation .","title":"How to Contribute"},{"location":"contributing/#documentation","text":"All of our documentation is kept in our Documentation Repository and can be browsed online. You can browse the Issues and create a Pull Request to help solve some of those.","title":"Documentation"},{"location":"contributing/#github-discussions","text":"Sons of PHP Discussions are centralized so all questions and help can be done in one location. Finding and helping answer questions is an easy way to become more involved.","title":"GitHub Discussions"},{"location":"contributing/#code","text":"All of our code is kept in the Mother Repository and manged from there. You can browse the issues and PRs for all the different Sons of PHP packages.","title":"Code"},{"location":"getting-help/","text":"Ways to get help and Ways to help yourself Need more help? The Sons of PHP have many different ways you can get more help. Documentation This website is basically the RTFM . Source Code The ultimate \"RTFM\". If the documentation on the site is lacking, there are gems in the source code. GitHub Discussions If the documentation and source code have failed you, you can get help by going to the Sons Of PHP Organization Discussions and searching for answers. If you cannot find any, create a new topic.","title":"Getting Help"},{"location":"getting-help/#ways-to-get-help-and-ways-to-help-yourself","text":"Need more help? The Sons of PHP have many different ways you can get more help.","title":"Ways to get help and Ways to help yourself"},{"location":"getting-help/#documentation","text":"This website is basically the RTFM .","title":"Documentation"},{"location":"getting-help/#source-code","text":"The ultimate \"RTFM\". If the documentation on the site is lacking, there are gems in the source code.","title":"Source Code"},{"location":"getting-help/#github-discussions","text":"If the documentation and source code have failed you, you can get help by going to the Sons Of PHP Organization Discussions and searching for answers. If you cannot find any, create a new topic.","title":"GitHub Discussions"},{"location":"reporting-issues/","text":"Reporting Issues Components, Libraries, Projects, etc. Please use the Mother Repo to report issues with any of the components. Be sure to include as much information as you can so it can get resolved as fast as possible. Documentation If you find any issues with the documentation please use the sonsofphp-docs repository to open an issue.","title":"Reporting Issues"},{"location":"reporting-issues/#reporting-issues","text":"","title":"Reporting Issues"},{"location":"reporting-issues/#components-libraries-projects-etc","text":"Please use the Mother Repo to report issues with any of the components. Be sure to include as much information as you can so it can get resolved as fast as possible.","title":"Components, Libraries, Projects, etc."},{"location":"reporting-issues/#documentation","text":"If you find any issues with the documentation please use the sonsofphp-docs repository to open an issue.","title":"Documentation"},{"location":"security/","text":"Security Policy Supported Versions Version Supported 0.2.x 0.1.x Reporting a Vulnerability Please review Tidelift Security Policy .","title":"Security Policy"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#supported-versions","text":"Version Supported 0.2.x 0.1.x","title":"Supported Versions"},{"location":"security/#reporting-a-vulnerability","text":"Please review Tidelift Security Policy .","title":"Reporting a Vulnerability"},{"location":"components/","text":"Components Sons of PHP creates and maintains various Components. Components are reusable libraries. With the Components, we try to have as few dependencies as possible. If additional functionality is needed, the dependencies are broken out into specific packages. If you are having issues, please see Reporting Issues","title":"Components Overview"},{"location":"components/#components","text":"Sons of PHP creates and maintains various Components. Components are reusable libraries. With the Components, we try to have as few dependencies as possible. If additional functionality is needed, the dependencies are broken out into specific packages. If you are having issues, please see Reporting Issues","title":"Components"},{"location":"components/clock/","text":"The Clock Component is a wrapper around PHP's native DateTime objects and functions. Using the Clock Component helps you test and keep everything a standard timezone Installation composer require sonsofphp/clock Usage SystemClock The SystemClock is generally used in production. If you need check timestamps or manage dates and times, this is the Clock you want to use. Use Dependency Injection to make it easy to test with. <?php use SonsOfPHP\\Component\\Clock\\SystemClock ; $clock = new SystemClock (); $now = $clock -> now (); // Returns a DateTimeImmutable object FixedClock The FixedClock is used for testing. Just set the time and inject into your class. <?php use SonsOfPHP\\Component\\Clock\\FixedClock ; $clock = new FixedClock (); $firstNow = $clock -> now (); sleep ( 10 ); $secondNow = $clock -> now (); var_dump ( $firstNow === $secondNow ); // true // You can update the internal time at any time. $clock -> tick (); // Updates the internal clock to the curent time $thridNow = $clock -> now (); var_dump ( $firstNow === $secondNow ); // still true var_dump ( $firstNow === $thirdNow ); // false var_dump ( $thirdNow === $secondNow ); // false // You can also set the internal clock to whatever time you need it to be $clock -> tickTo ( '2022-04-20 04:20:00' ); // format is \"Y-m-d H:i:s\"","title":"Clock"},{"location":"components/clock/#installation","text":"composer require sonsofphp/clock","title":"Installation"},{"location":"components/clock/#usage","text":"","title":"Usage"},{"location":"components/clock/#systemclock","text":"The SystemClock is generally used in production. If you need check timestamps or manage dates and times, this is the Clock you want to use. Use Dependency Injection to make it easy to test with. <?php use SonsOfPHP\\Component\\Clock\\SystemClock ; $clock = new SystemClock (); $now = $clock -> now (); // Returns a DateTimeImmutable object","title":"SystemClock"},{"location":"components/clock/#fixedclock","text":"The FixedClock is used for testing. Just set the time and inject into your class. <?php use SonsOfPHP\\Component\\Clock\\FixedClock ; $clock = new FixedClock (); $firstNow = $clock -> now (); sleep ( 10 ); $secondNow = $clock -> now (); var_dump ( $firstNow === $secondNow ); // true // You can update the internal time at any time. $clock -> tick (); // Updates the internal clock to the curent time $thridNow = $clock -> now (); var_dump ( $firstNow === $secondNow ); // still true var_dump ( $firstNow === $thirdNow ); // false var_dump ( $thirdNow === $secondNow ); // false // You can also set the internal clock to whatever time you need it to be $clock -> tickTo ( '2022-04-20 04:20:00' ); // format is \"Y-m-d H:i:s\"","title":"FixedClock"},{"location":"components/cqrs/","text":"CQRS Installation composer require sonsofphp/cqrs Additional Features Symfony Bridge Installing the Symfony Bridge will allow you to use Messenger and the Options Resolver with Commands and Queries. composer require sonsofphp/cqrs-symfony","title":"CQRS"},{"location":"components/cqrs/#cqrs","text":"","title":"CQRS"},{"location":"components/cqrs/#installation","text":"composer require sonsofphp/cqrs","title":"Installation"},{"location":"components/cqrs/#additional-features","text":"","title":"Additional Features"},{"location":"components/cqrs/#symfony-bridge","text":"Installing the Symfony Bridge will allow you to use Messenger and the Options Resolver with Commands and Queries. composer require sonsofphp/cqrs-symfony","title":"Symfony Bridge"},{"location":"components/cqrs/command-handlers/","text":"Command Handlers Once you create a Command, you need to create a Command Handler to handle that command. Command Handlers do NOT return any results. <?php use SonsOfPHP\\Component\\Cqrs\\Command\\CommandMessageHandlerInterface ; final class ExampleCommandHandler implements CommandMessageHandlerInterface { } Getting the Command to the Command Handler Attention The CommandMessageBus reqires the sonsofphp/cqrs-symfony package. You can use Messenger to process commands. If you're using Messenger as a standalone component, inject your MessageBus object into the CommandMessageBus . <?php use SonsOfPHP\\Bridge\\Symfony\\Cqrs\\CommandMessageBus ; $commandBus = new CommandMessageBus ( $messageBus ); If using the Symfony Framework, it's even easier. You'll just need to update your services.yaml file. SonsOfPHP\\Bridge\\Symfony\\Cqrs\\CommandMessageBus : arguments : [ '@command.bus' ] Note You will need to configure Messenger to have multiple buses. command.bus is the name of the bus that was configured to process commands. Using the CommandMessageBus is easy as well. <?php // Once you create a Command, it can just be dispatched. $commandBus -> dispatch ( $command ); // If you need to apply one or more stamps, this must be done // before the command is dispatched. $commandBus -> withStamps ([ $stamp ]) -> dispatch ( $command );","title":"Command Handlers"},{"location":"components/cqrs/command-handlers/#command-handlers","text":"Once you create a Command, you need to create a Command Handler to handle that command. Command Handlers do NOT return any results. <?php use SonsOfPHP\\Component\\Cqrs\\Command\\CommandMessageHandlerInterface ; final class ExampleCommandHandler implements CommandMessageHandlerInterface { }","title":"Command Handlers"},{"location":"components/cqrs/command-handlers/#getting-the-command-to-the-command-handler","text":"Attention The CommandMessageBus reqires the sonsofphp/cqrs-symfony package. You can use Messenger to process commands. If you're using Messenger as a standalone component, inject your MessageBus object into the CommandMessageBus . <?php use SonsOfPHP\\Bridge\\Symfony\\Cqrs\\CommandMessageBus ; $commandBus = new CommandMessageBus ( $messageBus ); If using the Symfony Framework, it's even easier. You'll just need to update your services.yaml file. SonsOfPHP\\Bridge\\Symfony\\Cqrs\\CommandMessageBus : arguments : [ '@command.bus' ] Note You will need to configure Messenger to have multiple buses. command.bus is the name of the bus that was configured to process commands. Using the CommandMessageBus is easy as well. <?php // Once you create a Command, it can just be dispatched. $commandBus -> dispatch ( $command ); // If you need to apply one or more stamps, this must be done // before the command is dispatched. $commandBus -> withStamps ([ $stamp ]) -> dispatch ( $command );","title":"Getting the Command to the Command Handler"},{"location":"components/cqrs/commands/","text":"Commands All Commands will implement the CommandMessageInterface . Basic Command Simple Commands can be created quickly and easily. <?php use SonsOfPHP\\Component\\Cqrs\\Command\\CommandMessageInterface ; final class SendPasswordResetEmailToUser implements CommandMessageInterface { private string $userId ; public function __construct ( string $userId ) { $this -> userId = $userId ; } public function getUserId () : string { return $this -> userId ; } } Options Resolver Command Attention The AbstractOptionsResolverCommand reqires the sonsofphp/cqrs-symfony package. The Options Resolver Command allows you to create more complex commands. For example. <?php use SonsOfPHP\\Bridge\\Symfony\\Cqrs\\Command\\AbstractOptionsResolverCommandMessage ; use Symfony\\Component\\OptionsResolver\\OptionsResolver ; final class SendPasswordResetEmailToUser extends AbstractOptionsResolverCommandMessage { protected function configureOptions ( OptionsResolver $resolver ) : void { $resolver -> define ( 'user_id' ) -> required () -> allowedTypes ( 'int' ) -> allowedValues ( function ( $value ) { return $value > 0 ; }); } } To use the command, you just create a new instance of the command. <?php $command = new SendPasswordResetEmailToUser ([ 'user_id' => 1234 ]);","title":"Commands"},{"location":"components/cqrs/commands/#commands","text":"All Commands will implement the CommandMessageInterface .","title":"Commands"},{"location":"components/cqrs/commands/#basic-command","text":"Simple Commands can be created quickly and easily. <?php use SonsOfPHP\\Component\\Cqrs\\Command\\CommandMessageInterface ; final class SendPasswordResetEmailToUser implements CommandMessageInterface { private string $userId ; public function __construct ( string $userId ) { $this -> userId = $userId ; } public function getUserId () : string { return $this -> userId ; } }","title":"Basic Command"},{"location":"components/cqrs/commands/#options-resolver-command","text":"Attention The AbstractOptionsResolverCommand reqires the sonsofphp/cqrs-symfony package. The Options Resolver Command allows you to create more complex commands. For example. <?php use SonsOfPHP\\Bridge\\Symfony\\Cqrs\\Command\\AbstractOptionsResolverCommandMessage ; use Symfony\\Component\\OptionsResolver\\OptionsResolver ; final class SendPasswordResetEmailToUser extends AbstractOptionsResolverCommandMessage { protected function configureOptions ( OptionsResolver $resolver ) : void { $resolver -> define ( 'user_id' ) -> required () -> allowedTypes ( 'int' ) -> allowedValues ( function ( $value ) { return $value > 0 ; }); } } To use the command, you just create a new instance of the command. <?php $command = new SendPasswordResetEmailToUser ([ 'user_id' => 1234 ]);","title":"Options Resolver Command"},{"location":"components/cqrs/queries/","text":"Queries <?php use SonsOfPHP\\Component\\Cqrs\\Query\\QueryMessageInterface ; final class ExampleQuery implements QueryMessageInterface { private $arg ; public function __construct ( $arg ) { $this -> arg = $arg ; } public function getArg () { return $this -> arg ; } }","title":"Queries"},{"location":"components/cqrs/queries/#queries","text":"<?php use SonsOfPHP\\Component\\Cqrs\\Query\\QueryMessageInterface ; final class ExampleQuery implements QueryMessageInterface { private $arg ; public function __construct ( $arg ) { $this -> arg = $arg ; } public function getArg () { return $this -> arg ; } }","title":"Queries"},{"location":"components/cqrs/query-handlers/","text":"Query Handlers Query Handlers will handle a Query and return a result. <?php use SonsOfPHP\\Component\\Cqrs\\Query\\QueryMessageHandlerInterface ; final class ExampleQueryHandler implements QueryMessageHandlerInterface { } Getting the Query to the Query Handler Attention The QueryMessageBus reqires the sonsofphp/cqrs-symfony package. You can use Messenger to process queries. If you're using Messenger as a standalone component, inject your MessageBus object into the QueryMessageBus . <?php use SonsOfPHP\\Bridge\\Symfony\\Cqrs\\QueryMessageBus ; $queryBus = new QueryMessageBus ( $messageBus ); If using the Symfony Framework, it's even easier. You'll just need to update your services.yaml file. SonsOfPHP\\Bridge\\Symfony\\Cqrs\\QueryMessageBus : arguments : [ '@query.bus' ] Note You will need to configure Messenger to have multiple buses. query.bus is the name of the bus that was configured to process queries. Using the QueryMessageBus is easy as well. <?php // Once you create a Query, it can just be handled. $queryBus -> handle ( $query );","title":"Query Handlers"},{"location":"components/cqrs/query-handlers/#query-handlers","text":"Query Handlers will handle a Query and return a result. <?php use SonsOfPHP\\Component\\Cqrs\\Query\\QueryMessageHandlerInterface ; final class ExampleQueryHandler implements QueryMessageHandlerInterface { }","title":"Query Handlers"},{"location":"components/cqrs/query-handlers/#getting-the-query-to-the-query-handler","text":"Attention The QueryMessageBus reqires the sonsofphp/cqrs-symfony package. You can use Messenger to process queries. If you're using Messenger as a standalone component, inject your MessageBus object into the QueryMessageBus . <?php use SonsOfPHP\\Bridge\\Symfony\\Cqrs\\QueryMessageBus ; $queryBus = new QueryMessageBus ( $messageBus ); If using the Symfony Framework, it's even easier. You'll just need to update your services.yaml file. SonsOfPHP\\Bridge\\Symfony\\Cqrs\\QueryMessageBus : arguments : [ '@query.bus' ] Note You will need to configure Messenger to have multiple buses. query.bus is the name of the bus that was configured to process queries. Using the QueryMessageBus is easy as well. <?php // Once you create a Query, it can just be handled. $queryBus -> handle ( $query );","title":"Getting the Query to the Query Handler"},{"location":"components/event-dispatcher/","text":"Installation composer require sonsofphp/event-dispatcher","title":"Event Dispatcher"},{"location":"components/event-dispatcher/#installation","text":"composer require sonsofphp/event-dispatcher","title":"Installation"},{"location":"components/event-sourcing/","text":"Event Sourcing Using the Event Sourcing Component allows you to manage an Event Sourced application. Installation composer require sonsofphp/event-sourcing Additional Features Additional features and functionality can be enabled by installing additional packages. Doctrine Installing the Doctrine Bridge will allow the storage of event messages in a database. composer require sonsofphp/event-sourcing-doctrine Symfony Installing the Symfony Bridge will add addition functionality such as allowing events to be sent asynchronously using the Messenger Component. It allows has options to generate UUID/ULID for Aggregates. composer require sonsofphp/event-sourcing-symfony","title":"Event Sourcing - Overview"},{"location":"components/event-sourcing/#event-sourcing","text":"Using the Event Sourcing Component allows you to manage an Event Sourced application.","title":"Event Sourcing"},{"location":"components/event-sourcing/#installation","text":"composer require sonsofphp/event-sourcing","title":"Installation"},{"location":"components/event-sourcing/#additional-features","text":"Additional features and functionality can be enabled by installing additional packages.","title":"Additional Features"},{"location":"components/event-sourcing/#doctrine","text":"Installing the Doctrine Bridge will allow the storage of event messages in a database. composer require sonsofphp/event-sourcing-doctrine","title":"Doctrine"},{"location":"components/event-sourcing/#symfony","text":"Installing the Symfony Bridge will add addition functionality such as allowing events to be sent asynchronously using the Messenger Component. It allows has options to generate UUID/ULID for Aggregates. composer require sonsofphp/event-sourcing-symfony","title":"Symfony"},{"location":"components/event-sourcing/aggregates/","text":"Aggregates Aggregates are the primary objects that you will be working with. Aggregate ID Each Aggregate will need to have it's own unique ID. You can use the same AggregateId class for all your aggregates or you can make you own for each one to ensure data consistency. Working with an Aggregate ID <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateId ; // Create a new Aggregate ID $aggregateId = new AggregateId ( 'my-unique-id' ); // You can get the value of the ID $id = $aggregateId -> toString (); $id = ( string ) $aggregateId ; // To compare two Aggregate IDs if ( $aggregateId -> equals ( $anotherAggregateId )) { // they are the same } If you need to create an Aggregate ID Class in order to use type-hinting, just extend the AbstractAggregateId class. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AbstractAggregateId ; final class UserId extends AbstractAggregateId { } Auto Generate Aggregate IDs Attention This requires the installation of the sonsofphp/event-sourcing-symfony package. Creating your own implementation to generate UUIDs or other type of IDs can be a pain in the ass. Once the sonsofphp/event-sourcing-symfony package is installed, you can easily use Symfony's Uid Component to generate UUIDs for you. <?php use SonsOfPHP\\Bridge\\Symfony\\EventSourcing\\AggregateId ; use Symfony\\Component\\Uid\\Uuid ; use Symfony\\Component\\Uid\\Ulid ; $id = new AggregateId (); Uuid :: isValid ( $id -> toString ()); // true // It also still supports setting the ID via the constructor $ulid = new AggregateId (( string ) new Ulid ()); Aggregate Version An Aggregate also has a version. Each event that is raised will increase the version. You will generally not have to work much with versions as they are mostly handled internally. Working with an Aggregate Version <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateVersion ; $aggregateVersion = new AggregateVersion (); // Get the version $version = $aggregateVersion -> toInt (); // Comparing Versions if ( $aggregateVersion -> equals ( $anotherAggregateVersion )) { // they are the same } Creating an Aggregate Pretty simple to create an aggregate. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AbstractAggregate ; final class UserAggregate extends AbstractAggregate { } Using the AbstractAggregate class takes care of all the heavy lifting. This allows you to focus on the different methods. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateId ; // Creating a new aggregate can be done by passing either a string $userAggregate = new UserAggregate ( 'unique-id' ); // Or an object that implements `AggregateIdInterface` $userAggregate = new UserAggregate ( new AggregateId ( 'unique-id' )); Working with Event Messages When you create an Event Message you will need to raise that event within your aggregate and if need be, apply that event to the aggregate. Let me show you what I mean. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AbstractAggregate ; use SonsOfPHP\\Component\\EventSourcing\\Message\\AbstractSerializableMessage ; final class EmailUpdated extends AbstractSerializableMessage { public function getEmail () : string { return $this -> getPayload ()[ 'email' ]; } } final class UserAggregate extends AbstractAggregate { private $email ; public function setEmail ( string $email ) { $this -> raiseEvent ( EmailUpdated :: new () -> withPayload ([ 'email' => $email , ]); } protected function applyEmailUpdated ( EmailUpdated $message ) : void { $this -> email = $message -> getEmail (); } } This is a very simplistic example. We should be doing a few checks on the email before the event is raised. What happens if we try to set an email and it's the same email as the user currently has? It would continue to raise an event. You will also notice the applyEmailUpdated method on the class. This is optional, but when you raise an event, the AbstractAggregate will look for a method in the format of apply{EventMessageClassname} . So if the event classname was DrankABeer it would look for the method applyDrankABeer and if there is one, it will pass in the DrankABeer event message.","title":"Aggregates"},{"location":"components/event-sourcing/aggregates/#aggregates","text":"Aggregates are the primary objects that you will be working with.","title":"Aggregates"},{"location":"components/event-sourcing/aggregates/#aggregate-id","text":"Each Aggregate will need to have it's own unique ID. You can use the same AggregateId class for all your aggregates or you can make you own for each one to ensure data consistency.","title":"Aggregate ID"},{"location":"components/event-sourcing/aggregates/#working-with-an-aggregate-id","text":"<?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateId ; // Create a new Aggregate ID $aggregateId = new AggregateId ( 'my-unique-id' ); // You can get the value of the ID $id = $aggregateId -> toString (); $id = ( string ) $aggregateId ; // To compare two Aggregate IDs if ( $aggregateId -> equals ( $anotherAggregateId )) { // they are the same } If you need to create an Aggregate ID Class in order to use type-hinting, just extend the AbstractAggregateId class. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AbstractAggregateId ; final class UserId extends AbstractAggregateId { }","title":"Working with an Aggregate ID"},{"location":"components/event-sourcing/aggregates/#auto-generate-aggregate-ids","text":"Attention This requires the installation of the sonsofphp/event-sourcing-symfony package. Creating your own implementation to generate UUIDs or other type of IDs can be a pain in the ass. Once the sonsofphp/event-sourcing-symfony package is installed, you can easily use Symfony's Uid Component to generate UUIDs for you. <?php use SonsOfPHP\\Bridge\\Symfony\\EventSourcing\\AggregateId ; use Symfony\\Component\\Uid\\Uuid ; use Symfony\\Component\\Uid\\Ulid ; $id = new AggregateId (); Uuid :: isValid ( $id -> toString ()); // true // It also still supports setting the ID via the constructor $ulid = new AggregateId (( string ) new Ulid ());","title":"Auto Generate Aggregate IDs"},{"location":"components/event-sourcing/aggregates/#aggregate-version","text":"An Aggregate also has a version. Each event that is raised will increase the version. You will generally not have to work much with versions as they are mostly handled internally.","title":"Aggregate Version"},{"location":"components/event-sourcing/aggregates/#working-with-an-aggregate-version","text":"<?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateVersion ; $aggregateVersion = new AggregateVersion (); // Get the version $version = $aggregateVersion -> toInt (); // Comparing Versions if ( $aggregateVersion -> equals ( $anotherAggregateVersion )) { // they are the same }","title":"Working with an Aggregate Version"},{"location":"components/event-sourcing/aggregates/#creating-an-aggregate","text":"Pretty simple to create an aggregate. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AbstractAggregate ; final class UserAggregate extends AbstractAggregate { } Using the AbstractAggregate class takes care of all the heavy lifting. This allows you to focus on the different methods. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateId ; // Creating a new aggregate can be done by passing either a string $userAggregate = new UserAggregate ( 'unique-id' ); // Or an object that implements `AggregateIdInterface` $userAggregate = new UserAggregate ( new AggregateId ( 'unique-id' ));","title":"Creating an Aggregate"},{"location":"components/event-sourcing/aggregates/#working-with-event-messages","text":"When you create an Event Message you will need to raise that event within your aggregate and if need be, apply that event to the aggregate. Let me show you what I mean. <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AbstractAggregate ; use SonsOfPHP\\Component\\EventSourcing\\Message\\AbstractSerializableMessage ; final class EmailUpdated extends AbstractSerializableMessage { public function getEmail () : string { return $this -> getPayload ()[ 'email' ]; } } final class UserAggregate extends AbstractAggregate { private $email ; public function setEmail ( string $email ) { $this -> raiseEvent ( EmailUpdated :: new () -> withPayload ([ 'email' => $email , ]); } protected function applyEmailUpdated ( EmailUpdated $message ) : void { $this -> email = $message -> getEmail (); } } This is a very simplistic example. We should be doing a few checks on the email before the event is raised. What happens if we try to set an email and it's the same email as the user currently has? It would continue to raise an event. You will also notice the applyEmailUpdated method on the class. This is optional, but when you raise an event, the AbstractAggregate will look for a method in the format of apply{EventMessageClassname} . So if the event classname was DrankABeer it would look for the method applyDrankABeer and if there is one, it will pass in the DrankABeer event message.","title":"Working with Event Messages"},{"location":"components/event-sourcing/aggregates/storage/","text":"Aggregate Repository The AggregateRepository is the main interface used to persist and find aggregates. Usage <?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\Repository\\AggregateRepository ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateIdInterface ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateInterface ; use SonsOfPHP\\Component\\EventSourcing\\Message\\Repository\\MessageRepositoryInterface ; use Psr\\EventDispatcher\\EventDispatcherInterface ; $repository = new AggregateRepository ( $aggregateClass , // @var string $eventDispatcher , // @var EventDispatcherInterface $messageRepository // @var MessageRepositoryInterface ); // @var AggregateIdInterface $aggregateId // @var AggregateInterface|null $aggregate $aggregate = $repository -> find ( $aggregateId ); // You can also pass in a string as the $aggregateId $aggregate = $repository -> find ( 'unique-id' ); // To save an aggregate $repository -> persist ( $aggregate );","title":"Aggregate Storage"},{"location":"components/event-sourcing/aggregates/storage/#aggregate-repository","text":"The AggregateRepository is the main interface used to persist and find aggregates.","title":"Aggregate Repository"},{"location":"components/event-sourcing/aggregates/storage/#usage","text":"<?php use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\Repository\\AggregateRepository ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateIdInterface ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateInterface ; use SonsOfPHP\\Component\\EventSourcing\\Message\\Repository\\MessageRepositoryInterface ; use Psr\\EventDispatcher\\EventDispatcherInterface ; $repository = new AggregateRepository ( $aggregateClass , // @var string $eventDispatcher , // @var EventDispatcherInterface $messageRepository // @var MessageRepositoryInterface ); // @var AggregateIdInterface $aggregateId // @var AggregateInterface|null $aggregate $aggregate = $repository -> find ( $aggregateId ); // You can also pass in a string as the $aggregateId $aggregate = $repository -> find ( 'unique-id' ); // To save an aggregate $repository -> persist ( $aggregate );","title":"Usage"},{"location":"components/event-sourcing/event-messages/","text":"Event Messages Event Messages are what Aggregates will raise and what the Event Message Handlers will handle. Event Messages will also be stored in whatever storage backend you decide to use. They are used to rebuild the Aggregates as well. So as you can see, Event Messages are a big part of Event Sourcing! Event Messages consist of 1) Metadata and 2) Payload. The Metadata contains information about the event and the aggregate. The payload is the data that is passed in and used to rebuild the aggregates.","title":"Event Messages"},{"location":"components/event-sourcing/event-messages/#event-messages","text":"Event Messages are what Aggregates will raise and what the Event Message Handlers will handle. Event Messages will also be stored in whatever storage backend you decide to use. They are used to rebuild the Aggregates as well. So as you can see, Event Messages are a big part of Event Sourcing! Event Messages consist of 1) Metadata and 2) Payload. The Metadata contains information about the event and the aggregate. The payload is the data that is passed in and used to rebuild the aggregates.","title":"Event Messages"},{"location":"components/event-sourcing/event-messages/generic-event-message/","text":"Using the Serializable Event Message The AbstractSerializableMessage allows you to quickly create Event Messages that are dispatched. Usage Event Message Class First you will need to create your Event Message Class. <?php use SonsOfPHP\\Component\\EventSourcing\\Message\\AbstractSerializableMessage ; class AggregateFieldChangedEventMessage extends AbstractSerializableMessage { } Initializing Event Message Class Once you create you Event Message Class, using it is very easy. <?php $event = AggregateFieldChangedEventMessage :: new () -> withPayload ([ 'previous_value' => $previousValue , 'new_value' => $newValue , ]);","title":"Using the Generic Event Message"},{"location":"components/event-sourcing/event-messages/generic-event-message/#using-the-serializable-event-message","text":"The AbstractSerializableMessage allows you to quickly create Event Messages that are dispatched.","title":"Using the Serializable Event Message"},{"location":"components/event-sourcing/event-messages/generic-event-message/#usage","text":"","title":"Usage"},{"location":"components/event-sourcing/event-messages/generic-event-message/#event-message-class","text":"First you will need to create your Event Message Class. <?php use SonsOfPHP\\Component\\EventSourcing\\Message\\AbstractSerializableMessage ; class AggregateFieldChangedEventMessage extends AbstractSerializableMessage { }","title":"Event Message Class"},{"location":"components/event-sourcing/event-messages/generic-event-message/#initializing-event-message-class","text":"Once you create you Event Message Class, using it is very easy. <?php $event = AggregateFieldChangedEventMessage :: new () -> withPayload ([ 'previous_value' => $previousValue , 'new_value' => $newValue , ]);","title":"Initializing Event Message Class"},{"location":"components/event-sourcing/event-messages/enricher/","text":"Message Enrichers Message Enrichers will add Metadata to the Event Messages. This metadata could be information about the user, the http request, etc. Internally, the library will use the metadata to insert data about the aggregate and the event.","title":"Message Enrichers"},{"location":"components/event-sourcing/event-messages/enricher/#message-enrichers","text":"Message Enrichers will add Metadata to the Event Messages. This metadata could be information about the user, the http request, etc. Internally, the library will use the metadata to insert data about the aggregate and the event.","title":"Message Enrichers"},{"location":"components/event-sourcing/event-messages/serializer/","text":"Message Serializers Message Serializers will serialize an Event Message into Event Data and deserialize Event Data into an Event Message. These are generally used by the Message Repository classes and serialize is done before the event message is persisted to storage and deserialize is done on the data that is pulled out of the database.","title":"Message Serializers"},{"location":"components/event-sourcing/event-messages/serializer/#message-serializers","text":"Message Serializers will serialize an Event Message into Event Data and deserialize Event Data into an Event Message. These are generally used by the Message Repository classes and serialize is done before the event message is persisted to storage and deserialize is done on the data that is pulled out of the database.","title":"Message Serializers"},{"location":"components/event-sourcing/event-messages/storage/","text":"Message Repository The message repository will store the event messages where and how you want them to be stored. This is usually a database but could be anywhere. The Aggregate Repository uses the Message Repository to save the event messages that were raised. Usage <?php use SonsOfPHP\\Component\\EventSourcing\\Message\\Repository\\MessageRepositoryInterface ; use SonsOfPHP\\Component\\EventSourcing\\Message\\MessageInterface ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateIdInterface ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateVersionInterface ; // @var MessageRepositoryInterface $messageRepository // @var MessageInterface $message $messageRepository -> persist ( $message ); // @var AggregateIdInterface $aggregateId // @var MessageInterface[] $eventMessages $eventMessages = $messageRepository -> find ( $aggregateId ); // or to grab event messages after a specific version // @var AggregateVersionInterface $aggregateVersion $eventMessages = $messageRepository -> find ( $aggregateId , $aggregateVersion ); InMemoryMessageRepository This repository is mainly used for testing, however to keep the examples easy we will start with this message repository. <?php use SonsOfPHP\\Component\\EventSourcing\\Message\\Repository\\InMemoryRepository ; $messageRepository = new InMemoryRepository (); DoctrineDbalMessageRepository Attention The DoctrineDbalMessageRepository requires the sonsofphp/event-sourcing-doctrine package. The DoctrineDbalMessageRepository allows you to persist event messages in the database. <?php use SonsOfPHP\\Bridge\\Doctrine\\EventSourcing\\DoctrineDbalMessageRepository ; use SonsOfPHP\\Bridge\\Doctrine\\EventSourcing\\TableSchemaInterface ; use Doctrine\\DBAL\\Connection ; use SonsOfPHP\\Component\\EventSourcing\\Message\\Serializer\\MessageSerializerInterface ; $messageRepository = new DoctrineDbalMessageRepository ( $connection , // @var Connection $messageSerializer , // @var MessageSerializerInterface $tableSchema // @var TableSchemaInterface ); The TableSchemaInterface defines what table to use along with the columns and mapping information. They are easy to work with and create custom schemas.","title":"Message Storage"},{"location":"components/event-sourcing/event-messages/storage/#message-repository","text":"The message repository will store the event messages where and how you want them to be stored. This is usually a database but could be anywhere. The Aggregate Repository uses the Message Repository to save the event messages that were raised.","title":"Message Repository"},{"location":"components/event-sourcing/event-messages/storage/#usage","text":"<?php use SonsOfPHP\\Component\\EventSourcing\\Message\\Repository\\MessageRepositoryInterface ; use SonsOfPHP\\Component\\EventSourcing\\Message\\MessageInterface ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateIdInterface ; use SonsOfPHP\\Component\\EventSourcing\\Aggregate\\AggregateVersionInterface ; // @var MessageRepositoryInterface $messageRepository // @var MessageInterface $message $messageRepository -> persist ( $message ); // @var AggregateIdInterface $aggregateId // @var MessageInterface[] $eventMessages $eventMessages = $messageRepository -> find ( $aggregateId ); // or to grab event messages after a specific version // @var AggregateVersionInterface $aggregateVersion $eventMessages = $messageRepository -> find ( $aggregateId , $aggregateVersion );","title":"Usage"},{"location":"components/event-sourcing/event-messages/storage/#inmemorymessagerepository","text":"This repository is mainly used for testing, however to keep the examples easy we will start with this message repository. <?php use SonsOfPHP\\Component\\EventSourcing\\Message\\Repository\\InMemoryRepository ; $messageRepository = new InMemoryRepository ();","title":"InMemoryMessageRepository"},{"location":"components/event-sourcing/event-messages/storage/#doctrinedbalmessagerepository","text":"Attention The DoctrineDbalMessageRepository requires the sonsofphp/event-sourcing-doctrine package. The DoctrineDbalMessageRepository allows you to persist event messages in the database. <?php use SonsOfPHP\\Bridge\\Doctrine\\EventSourcing\\DoctrineDbalMessageRepository ; use SonsOfPHP\\Bridge\\Doctrine\\EventSourcing\\TableSchemaInterface ; use Doctrine\\DBAL\\Connection ; use SonsOfPHP\\Component\\EventSourcing\\Message\\Serializer\\MessageSerializerInterface ; $messageRepository = new DoctrineDbalMessageRepository ( $connection , // @var Connection $messageSerializer , // @var MessageSerializerInterface $tableSchema // @var TableSchemaInterface ); The TableSchemaInterface defines what table to use along with the columns and mapping information. They are easy to work with and create custom schemas.","title":"DoctrineDbalMessageRepository"},{"location":"components/event-sourcing/event-messages/upcaster/","text":"Message Upcasters Message Upcasters will modify raw event data before it is rebuilt back into a message. This is useful in case you want to change the format of event data if you screwed up or if you learned something new.","title":"Message Upcasters"},{"location":"components/event-sourcing/event-messages/upcaster/#message-upcasters","text":"Message Upcasters will modify raw event data before it is rebuilt back into a message. This is useful in case you want to change the format of event data if you screwed up or if you learned something new.","title":"Message Upcasters"},{"location":"components/feature-toggle/","text":"Installation composer require sonsofphp/feature-toggle","title":"Feature Toggle"},{"location":"components/feature-toggle/#installation","text":"composer require sonsofphp/feature-toggle","title":"Installation"},{"location":"components/json/","text":"The JSON Component is a wrapper around php's json_encode and json_decode . Installation composer require sonsofphp/json Usage Json <?php use SonsOfPHP\\Component\\Json\\Json ; // You use this as a drop-in replacement for json_encode and json_decode $json = Json :: encode ( $value ); $object = Json :: decode ( $json ); $array = Json :: decode ( $json , true ); // It comes with a JsonEncoder and JsonDecoder, see below for usage $json = new Json (); $encoder = $json -> getEncoder (); $decoder = $json -> getDecoder (); JsonEncoder <?php use SonsOfPHP\\Component\\Json\\JsonEncoder ; $encoder = new JsonEncoder (); // You can add various flags using the various JSON constants PHP provides. You // can enter them one at a time or combine them $encoder = $encoder -> withFlags ( JSON_HEX_QUOT ) -> withFlags ( JSON_HEX_TAG | JSON_HEX_AMP ); // Removing flags is just as easy $encoder = $encoder -> withoutFlags ( JSON_HEX_TAG ); // Changing the depth is just as easy $encoder = $encoder -> withDepth ( 256 ); // Once you are ready, you just encode the value to output json $json = $encoder -> encode ( $value ); // You can chain everything together as well $json = ( new JsonEncoder ()) -> withDepth ( 256 ) -> withFlags ( JSON_HEX_QUOT ) -> encode ( $value ); JsonDecoder <?php use SonsOfPHP\\Component\\Json\\JsonDecoder ; $decoder = new JsonDecoder (); // Add & Remove flags with the constants provided by PHP $decoder = $decoder -> withFlags ( ... ) -> withoutFlags ( ... ); // Change the depth $decoder = $decoder -> withDepth ( 256 ); // Easy to return array $decoder = $decoder -> asArray (); // Decode the json $array = $decoder -> decode ( $json ); Need Help? Check out Sons of PHP's Organization Discussions .","title":"JSON"},{"location":"components/json/#installation","text":"composer require sonsofphp/json","title":"Installation"},{"location":"components/json/#usage","text":"","title":"Usage"},{"location":"components/json/#json","text":"<?php use SonsOfPHP\\Component\\Json\\Json ; // You use this as a drop-in replacement for json_encode and json_decode $json = Json :: encode ( $value ); $object = Json :: decode ( $json ); $array = Json :: decode ( $json , true ); // It comes with a JsonEncoder and JsonDecoder, see below for usage $json = new Json (); $encoder = $json -> getEncoder (); $decoder = $json -> getDecoder ();","title":"Json"},{"location":"components/json/#jsonencoder","text":"<?php use SonsOfPHP\\Component\\Json\\JsonEncoder ; $encoder = new JsonEncoder (); // You can add various flags using the various JSON constants PHP provides. You // can enter them one at a time or combine them $encoder = $encoder -> withFlags ( JSON_HEX_QUOT ) -> withFlags ( JSON_HEX_TAG | JSON_HEX_AMP ); // Removing flags is just as easy $encoder = $encoder -> withoutFlags ( JSON_HEX_TAG ); // Changing the depth is just as easy $encoder = $encoder -> withDepth ( 256 ); // Once you are ready, you just encode the value to output json $json = $encoder -> encode ( $value ); // You can chain everything together as well $json = ( new JsonEncoder ()) -> withDepth ( 256 ) -> withFlags ( JSON_HEX_QUOT ) -> encode ( $value );","title":"JsonEncoder"},{"location":"components/json/#jsondecoder","text":"<?php use SonsOfPHP\\Component\\Json\\JsonDecoder ; $decoder = new JsonDecoder (); // Add & Remove flags with the constants provided by PHP $decoder = $decoder -> withFlags ( ... ) -> withoutFlags ( ... ); // Change the depth $decoder = $decoder -> withDepth ( 256 ); // Easy to return array $decoder = $decoder -> asArray (); // Decode the json $array = $decoder -> decode ( $json );","title":"JsonDecoder"},{"location":"components/json/#need-help","text":"Check out Sons of PHP's Organization Discussions .","title":"Need Help?"},{"location":"components/money/","text":"Money Component The Money component was inspired by JSR 354 along with a few other ideas. It is mainly used for services and sites dealing with money. Installation composer require sonsofphp/money Usage Money <?php use SonsOfPHP\\Component\\Money\\Money ; use SonsOfPHP\\Component\\Money\\Currency ; // Can use the Money Class like this $money = new Money ( 100 , new Currency ( 'USD' )); $amount = $money -> getAmount (); // AmountInterface $value = $amount -> toString (); // `toInt` and `toFloat` are also supported // Or like this $money = Money :: USD ( 100 ); You can preform different operations to create new money. <?php use SonsOfPHP\\Component\\Money\\Money ; $money = Money :: USD ( 100 ); $newMoney1 = $money -> add ( Money :: USD ( 100 )); // Amount is now 200 $newMoney2 = $money -> subtract ( Money :: USD ( 100 )); // Amount is now 0 // The amount of the orginal Money does not change $amount = $money -> getAmount (); // Amount is 100 You can multiple and divide too. <?php use SonsOfPHP\\Component\\Money\\Money ; $money = Money :: USD ( 100 ); $newMoney1 = $money -> multiply ( 5 ); // value of Amount is now 500 $newMoney2 = $money -> divide ( 5 ); // value of Amount is now 20 // The amount of the orginal Money does not change $amount = $money -> getAmount (); // value of Amount is 100 Currency <?php use SonsOfPHP\\Component\\Money\\Currency ; $currency = new Currency ( 'USD' ); // OR $currency = Currency :: USD (); Need Help? Check out Sons of PHP's Organization Discussions .","title":"Money"},{"location":"components/money/#money-component","text":"The Money component was inspired by JSR 354 along with a few other ideas. It is mainly used for services and sites dealing with money.","title":"Money Component"},{"location":"components/money/#installation","text":"composer require sonsofphp/money","title":"Installation"},{"location":"components/money/#usage","text":"","title":"Usage"},{"location":"components/money/#money","text":"<?php use SonsOfPHP\\Component\\Money\\Money ; use SonsOfPHP\\Component\\Money\\Currency ; // Can use the Money Class like this $money = new Money ( 100 , new Currency ( 'USD' )); $amount = $money -> getAmount (); // AmountInterface $value = $amount -> toString (); // `toInt` and `toFloat` are also supported // Or like this $money = Money :: USD ( 100 ); You can preform different operations to create new money. <?php use SonsOfPHP\\Component\\Money\\Money ; $money = Money :: USD ( 100 ); $newMoney1 = $money -> add ( Money :: USD ( 100 )); // Amount is now 200 $newMoney2 = $money -> subtract ( Money :: USD ( 100 )); // Amount is now 0 // The amount of the orginal Money does not change $amount = $money -> getAmount (); // Amount is 100 You can multiple and divide too. <?php use SonsOfPHP\\Component\\Money\\Money ; $money = Money :: USD ( 100 ); $newMoney1 = $money -> multiply ( 5 ); // value of Amount is now 500 $newMoney2 = $money -> divide ( 5 ); // value of Amount is now 20 // The amount of the orginal Money does not change $amount = $money -> getAmount (); // value of Amount is 100","title":"Money"},{"location":"components/money/#currency","text":"<?php use SonsOfPHP\\Component\\Money\\Currency ; $currency = new Currency ( 'USD' ); // OR $currency = Currency :: USD ();","title":"Currency"},{"location":"components/money/#need-help","text":"Check out Sons of PHP's Organization Discussions .","title":"Need Help?"},{"location":"components/money/currency-providers/","text":"Currency Providers The Currency Provider allows you to grab all the known Currencies. It also has a query method to pass in CurrencyProviderQuery s to return various results. Basic Usage Loop over Currencies <?php // @var CurrencyInterface $currency foreach ( $provider -> getCurrencies () as $currency ) { // Do something with each currency } Check if Provider has a Currency // Check to see if the provider has the currency you are looking for // @var bool $hasCurrency $hasCurrency = $provider->hasCurrency('USD'); $hasCurrency = $provider->hasCurrency(Currency::USD()); Getting Currency from the Provider // You can get a Currency like this. If the Currency does not exist // it will throw an exception. // @var CurrencyInterface $currency $currency = $provider->getCurrency('USD'); $code = $currency->getCurrencyCode(); // \"USD\" $numCode = $currency->getNumericCode(); // 840 $minorUnit = $currency->getMinorUnit(); // 2 Currency Providers CurrencyProvider The CurrencyProvider is usually the one that you will be using most of the time. It provides most of the ISO 4217 currencies. <?php use SonsOfPHP\\Component\\Money\\CurrencyProvider\\CurrencyProvider ; $provider = new CurrencyProvider (); XCurrencyProvider The XCurrencyProvider gives you access to all of the \"X\" Currencies. For example, this provider is where you will find the Currency \"XTS\" which is reserved for use in testing. <?php use SonsOfPHP\\Component\\Money\\CurrencyProvider\\XCurrencyProvider ; $provider = new XCurrencyProvider (); ChainCurrencyProvider The ChainCurrencyProvider lets you use multiple Currency Providers together at once. It does not provide any currencies itself. <?php use SonsOfPHP\\Component\\Money\\CurrencyProvider\\ChainCurrencyProvider ; use SonsOfPHP\\Component\\Money\\CurrencyProvider\\CurrencyProvider ; use SonsOfPHP\\Component\\Money\\CurrencyProvider\\XCurrencyProvider ; $provider = new ChainCurrencyProvider ([ new CurrencyProvider (), new XCurrencyProvider (), ]); // You can add additional providers as well $provider -> addProvier ( new MyCustomCurrencyProvider ());","title":"Currency Providers"},{"location":"components/money/currency-providers/#currency-providers","text":"The Currency Provider allows you to grab all the known Currencies. It also has a query method to pass in CurrencyProviderQuery s to return various results.","title":"Currency Providers"},{"location":"components/money/currency-providers/#basic-usage","text":"","title":"Basic Usage"},{"location":"components/money/currency-providers/#loop-over-currencies","text":"<?php // @var CurrencyInterface $currency foreach ( $provider -> getCurrencies () as $currency ) { // Do something with each currency }","title":"Loop over Currencies"},{"location":"components/money/currency-providers/#check-if-provider-has-a-currency","text":"// Check to see if the provider has the currency you are looking for // @var bool $hasCurrency $hasCurrency = $provider->hasCurrency('USD'); $hasCurrency = $provider->hasCurrency(Currency::USD());","title":"Check if Provider has a Currency"},{"location":"components/money/currency-providers/#getting-currency-from-the-provider","text":"// You can get a Currency like this. If the Currency does not exist // it will throw an exception. // @var CurrencyInterface $currency $currency = $provider->getCurrency('USD'); $code = $currency->getCurrencyCode(); // \"USD\" $numCode = $currency->getNumericCode(); // 840 $minorUnit = $currency->getMinorUnit(); // 2","title":"Getting Currency from the Provider"},{"location":"components/money/currency-providers/#currency-providers_1","text":"","title":"Currency Providers"},{"location":"components/money/currency-providers/#currencyprovider","text":"The CurrencyProvider is usually the one that you will be using most of the time. It provides most of the ISO 4217 currencies. <?php use SonsOfPHP\\Component\\Money\\CurrencyProvider\\CurrencyProvider ; $provider = new CurrencyProvider ();","title":"CurrencyProvider"},{"location":"components/money/currency-providers/#xcurrencyprovider","text":"The XCurrencyProvider gives you access to all of the \"X\" Currencies. For example, this provider is where you will find the Currency \"XTS\" which is reserved for use in testing. <?php use SonsOfPHP\\Component\\Money\\CurrencyProvider\\XCurrencyProvider ; $provider = new XCurrencyProvider ();","title":"XCurrencyProvider"},{"location":"components/money/currency-providers/#chaincurrencyprovider","text":"The ChainCurrencyProvider lets you use multiple Currency Providers together at once. It does not provide any currencies itself. <?php use SonsOfPHP\\Component\\Money\\CurrencyProvider\\ChainCurrencyProvider ; use SonsOfPHP\\Component\\Money\\CurrencyProvider\\CurrencyProvider ; use SonsOfPHP\\Component\\Money\\CurrencyProvider\\XCurrencyProvider ; $provider = new ChainCurrencyProvider ([ new CurrencyProvider (), new XCurrencyProvider (), ]); // You can add additional providers as well $provider -> addProvier ( new MyCustomCurrencyProvider ());","title":"ChainCurrencyProvider"},{"location":"components/money/operators/","text":"Operators allow you to change something about the Money and will return a new instance of the Money. For example, the methods: add, subtract, multiply, and divide on the Money class are all MoneyOperators. You can create your own Money Operators and use them with the Money class out of the box. <?php $operator = new MyOwnMoneyOperator (); $newMoney = $money -> with ( $operator ); Here's how it works in slightly more detail. <?php use SonsOfPHP\\Component\\Money\\Operator\\Money\\AddMoneyOperator ; use SonsOfPHP\\Component\\Money\\Money ; $accountBalance = Money :: USD ( 1000 ); $depositAmount = Money :: USD ( 2000 ); // The construct takes the deposit amount we will apply to the balance $operator = new AddMoneyOperator ( $depositAmount ); // The operator will apply (the deposit amount) to the account balance // and the returned MoneyInterface will be a new object $newBalance = $operator -> apply ( $accountBalance ); $newBalance -> isEqualTo ( $accountBalance ); // will return false // Another way to use the Operator is $anotherNewBalance = $accountBalance -> with ( $operator ); $newBalance -> isEqualTo ( $anotherNewBalance ); // will return true // Even though $newBalance and $anotherNewBalance are different objects, they // are both USD and both have the same amount (3000) As you can see, using Operators provides you some power. You could create your Operator to calculate a payment amount for a loan. Another great idea is to use an Operator that can calculate tax.","title":"Operators"},{"location":"components/money/queries/","text":"Queries are used to answer questions about the Money. They can return different values based on what you want. You can also create and use your own money queries. <?php $query = new DummyQuery (); $result = $money -> query ( $query ); Let's take a look a MoneyQuery in a little more detail. <?php use SonsOfPHP\\Component\\Money\\Query\\Currency\\IsEqualToCurrencyQuery ; use SonsOfPHP\\Component\\Money\\Currency ; $currency = Currency :: USD (); $currencyUSD = Currency :: USD (); $currencyJPY = Currency :: JPY (); // We create the new query and inject the dependencies $query = new IsEqualToCurrencyQuery ( $currency ); // Both currencies have the same Currency Code, so we can say // they are equal $isEqual = $query -> queryFrom ( $currencyUSD ); // returns true // Another way to do the same thing is $isEqual = $currencyUSD -> query ( $query ); // returns true $isEqual = $currencyJPY -> query ( $query ); // returns false Queries aren't just limited to bool type of results. Running a query can return any type of result. This means you could return an array or even a Generator .","title":"Queries"},{"location":"components/version/","text":"Version Component The Version component allows you an easy way to parse and compare versions. It supports both Semversion and package manager syntax. Installation composer require sonsofphp/version Usage The base Version supports semver standards. <?php use SonsOfPHP\\Component\\Version\\Version ; // You can create versions two different ways $version = new Version ( '1.2.3' ); $version = Version :: from ( '1.2.3' ); echo $version ; // prints \"1.2.3\" $versionString = $version -> toString (); // $versionString === \"1.2.3\" // Easy API $major = $version -> getMajor (); // $major === 1 $minor = $version -> getMinor (); // $minor === 2 $patch = $version -> getPatch (); // $patch === 3 // Comparing Versions is easy too $currentVersion = new Version ( '1.1.1' ); $latestVersion = new Version ( '1.1.2' ); // if $latestVersion > $currentVersion if ( $latestVersion -> isGreaterThan ( $currentVersion )) { // run upgrade } // Also supports \"isLessThan\" and \"isEqualTo\" Advanced Usage You can also use Pre-release and Build Metadata with your versions. <?php use SonsOfPHP\\Component\\Version\\Version ; // Create a new Version that includes Pre-release and/or Build Metadata $version = new Version ( '1.2.3-RC1+buildMetaData' ); // You can grab the info as well $preRelease = $version -> getPreRelease (); // $preRelease === \"RC1\" $build = $version -> getBuild (); // $build === \"RC1\"","title":"Version"},{"location":"components/version/#version-component","text":"The Version component allows you an easy way to parse and compare versions. It supports both Semversion and package manager syntax.","title":"Version Component"},{"location":"components/version/#installation","text":"composer require sonsofphp/version","title":"Installation"},{"location":"components/version/#usage","text":"The base Version supports semver standards. <?php use SonsOfPHP\\Component\\Version\\Version ; // You can create versions two different ways $version = new Version ( '1.2.3' ); $version = Version :: from ( '1.2.3' ); echo $version ; // prints \"1.2.3\" $versionString = $version -> toString (); // $versionString === \"1.2.3\" // Easy API $major = $version -> getMajor (); // $major === 1 $minor = $version -> getMinor (); // $minor === 2 $patch = $version -> getPatch (); // $patch === 3 // Comparing Versions is easy too $currentVersion = new Version ( '1.1.1' ); $latestVersion = new Version ( '1.1.2' ); // if $latestVersion > $currentVersion if ( $latestVersion -> isGreaterThan ( $currentVersion )) { // run upgrade } // Also supports \"isLessThan\" and \"isEqualTo\"","title":"Usage"},{"location":"components/version/#advanced-usage","text":"You can also use Pre-release and Build Metadata with your versions. <?php use SonsOfPHP\\Component\\Version\\Version ; // Create a new Version that includes Pre-release and/or Build Metadata $version = new Version ( '1.2.3-RC1+buildMetaData' ); // You can grab the info as well $preRelease = $version -> getPreRelease (); // $preRelease === \"RC1\" $build = $version -> getBuild (); // $build === \"RC1\"","title":"Advanced Usage"}]}